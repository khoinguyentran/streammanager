/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.stream.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamManagementService {

  public interface Iface {

    /**
     * Get info of all stream servers.
     * RETURN is a list of StreamServerInfo.
     */
    public List<com.kaisquare.stream.thrift.SmStreamServerInfo> getServerPoolInfo() throws org.apache.thrift.TException;

    /**
     * Add a stream.
     * (1) deviceId - the device ID.
     * (2) channelId - the channel ID.
     * (3) streamName - Name of the output stream that is appended to the server's url.
     *     If empty, (deviceId, channelId) will be used.
     * (4) outputType - output stream type.
     *     Now supported: rtmp/h264.
     * (5) source - URL of the source stream.
     * (6) sourceType - source stream type.
     *     Now suported: rtsp/h264.
     * RETURN value is the output URL of the stream.
     * Empty if failed.
     * 
     * @param deviceId
     * @param channelId
     * @param streamName
     * @param outputType
     * @param source
     * @param sourceType
     */
    public String addStream(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType) throws org.apache.thrift.TException;

    /**
     * Add a playlist stream.
     * (1) deviceId - the device ID.
     * (2) channelId - the channel ID.
     * (3) streamName - Name of the output stream that is appended to the server's url.
     *     If empty, (deviceId, channelId) will be used.
     * (4) outputType - output stream type.
     *     Now supported: rtmp/h264.
     * (5) sourceList - path to the source files.
     * (6) timeMap - list of silent periods between items in playlist (in milliseconds).
     * RETURN value is the output URL of playlist.
     * Empty if failed.
     * 
     * @param deviceId
     * @param channelId
     * @param streamName
     * @param outputType
     * @param sourceList
     * @param timeMap
     */
    public String addPlaylist(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap) throws org.apache.thrift.TException;

    /**
     * Remove a stream from crtmpserver.
     * (1) deviceId - the device ID.
     * (2) channelId - the channel ID.
     * (3) streamName - Name of the stream.
     *     If empty, (deviceId, channelId) will be used.
     * (4) outputType - output type of the stream.
     * RETURN value is only false if the stream is being locked in database.
     * 
     * @param deviceId
     * @param channel
     * @param streamName
     * @param outputType
     */
    public boolean removeStream(long deviceId, int channel, String streamName, String outputType) throws org.apache.thrift.TException;

    /**
     * Query the list of clients for a stream.
     * (1) deviceId - the device ID.
     * (2) channelId - the channel ID.
     * (3) streamName - Name of the stream.
     *     If empty, (deviceId, channelId) will be used.
     * (4) outputType - output type of the stream.
     * RETURN value is the list of all clients of the stream.
     * 
     * @param deviceId
     * @param channelId
     * @param streamName
     * @param outputType
     */
    public List<com.kaisquare.stream.thrift.SmStreamClientInfo> getClients(long deviceId, int channelId, String streamName, String outputType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getServerPoolInfo(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerPoolInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void addStream(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addStream_call> resultHandler) throws org.apache.thrift.TException;

    public void addPlaylist(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPlaylist_call> resultHandler) throws org.apache.thrift.TException;

    public void removeStream(long deviceId, int channel, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeStream_call> resultHandler) throws org.apache.thrift.TException;

    public void getClients(long deviceId, int channelId, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getClients_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.kaisquare.stream.thrift.SmStreamServerInfo> getServerPoolInfo() throws org.apache.thrift.TException
    {
      send_getServerPoolInfo();
      return recv_getServerPoolInfo();
    }

    public void send_getServerPoolInfo() throws org.apache.thrift.TException
    {
      getServerPoolInfo_args args = new getServerPoolInfo_args();
      sendBase("getServerPoolInfo", args);
    }

    public List<com.kaisquare.stream.thrift.SmStreamServerInfo> recv_getServerPoolInfo() throws org.apache.thrift.TException
    {
      getServerPoolInfo_result result = new getServerPoolInfo_result();
      receiveBase(result, "getServerPoolInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerPoolInfo failed: unknown result");
    }

    public String addStream(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType) throws org.apache.thrift.TException
    {
      send_addStream(deviceId, channelId, streamName, outputType, source, sourceType);
      return recv_addStream();
    }

    public void send_addStream(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType) throws org.apache.thrift.TException
    {
      addStream_args args = new addStream_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setStreamName(streamName);
      args.setOutputType(outputType);
      args.setSource(source);
      args.setSourceType(sourceType);
      sendBase("addStream", args);
    }

    public String recv_addStream() throws org.apache.thrift.TException
    {
      addStream_result result = new addStream_result();
      receiveBase(result, "addStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStream failed: unknown result");
    }

    public String addPlaylist(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap) throws org.apache.thrift.TException
    {
      send_addPlaylist(deviceId, channelId, streamName, outputType, sourceList, timeMap);
      return recv_addPlaylist();
    }

    public void send_addPlaylist(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap) throws org.apache.thrift.TException
    {
      addPlaylist_args args = new addPlaylist_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setStreamName(streamName);
      args.setOutputType(outputType);
      args.setSourceList(sourceList);
      args.setTimeMap(timeMap);
      sendBase("addPlaylist", args);
    }

    public String recv_addPlaylist() throws org.apache.thrift.TException
    {
      addPlaylist_result result = new addPlaylist_result();
      receiveBase(result, "addPlaylist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPlaylist failed: unknown result");
    }

    public boolean removeStream(long deviceId, int channel, String streamName, String outputType) throws org.apache.thrift.TException
    {
      send_removeStream(deviceId, channel, streamName, outputType);
      return recv_removeStream();
    }

    public void send_removeStream(long deviceId, int channel, String streamName, String outputType) throws org.apache.thrift.TException
    {
      removeStream_args args = new removeStream_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setStreamName(streamName);
      args.setOutputType(outputType);
      sendBase("removeStream", args);
    }

    public boolean recv_removeStream() throws org.apache.thrift.TException
    {
      removeStream_result result = new removeStream_result();
      receiveBase(result, "removeStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeStream failed: unknown result");
    }

    public List<com.kaisquare.stream.thrift.SmStreamClientInfo> getClients(long deviceId, int channelId, String streamName, String outputType) throws org.apache.thrift.TException
    {
      send_getClients(deviceId, channelId, streamName, outputType);
      return recv_getClients();
    }

    public void send_getClients(long deviceId, int channelId, String streamName, String outputType) throws org.apache.thrift.TException
    {
      getClients_args args = new getClients_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setStreamName(streamName);
      args.setOutputType(outputType);
      sendBase("getClients", args);
    }

    public List<com.kaisquare.stream.thrift.SmStreamClientInfo> recv_getClients() throws org.apache.thrift.TException
    {
      getClients_result result = new getClients_result();
      receiveBase(result, "getClients");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClients failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getServerPoolInfo(org.apache.thrift.async.AsyncMethodCallback<getServerPoolInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerPoolInfo_call method_call = new getServerPoolInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerPoolInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getServerPoolInfo_call(org.apache.thrift.async.AsyncMethodCallback<getServerPoolInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerPoolInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerPoolInfo_args args = new getServerPoolInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.stream.thrift.SmStreamServerInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerPoolInfo();
      }
    }

    public void addStream(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType, org.apache.thrift.async.AsyncMethodCallback<addStream_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addStream_call method_call = new addStream_call(deviceId, channelId, streamName, outputType, source, sourceType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channelId;
      private String streamName;
      private String outputType;
      private String source;
      private String sourceType;
      public addStream_call(long deviceId, int channelId, String streamName, String outputType, String source, String sourceType, org.apache.thrift.async.AsyncMethodCallback<addStream_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.streamName = streamName;
        this.outputType = outputType;
        this.source = source;
        this.sourceType = sourceType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addStream_args args = new addStream_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setStreamName(streamName);
        args.setOutputType(outputType);
        args.setSource(source);
        args.setSourceType(sourceType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addStream();
      }
    }

    public void addPlaylist(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap, org.apache.thrift.async.AsyncMethodCallback<addPlaylist_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPlaylist_call method_call = new addPlaylist_call(deviceId, channelId, streamName, outputType, sourceList, timeMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPlaylist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channelId;
      private String streamName;
      private String outputType;
      private List<String> sourceList;
      private List<Long> timeMap;
      public addPlaylist_call(long deviceId, int channelId, String streamName, String outputType, List<String> sourceList, List<Long> timeMap, org.apache.thrift.async.AsyncMethodCallback<addPlaylist_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.streamName = streamName;
        this.outputType = outputType;
        this.sourceList = sourceList;
        this.timeMap = timeMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPlaylist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPlaylist_args args = new addPlaylist_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setStreamName(streamName);
        args.setOutputType(outputType);
        args.setSourceList(sourceList);
        args.setTimeMap(timeMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPlaylist();
      }
    }

    public void removeStream(long deviceId, int channel, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<removeStream_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeStream_call method_call = new removeStream_call(deviceId, channel, streamName, outputType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String streamName;
      private String outputType;
      public removeStream_call(long deviceId, int channel, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<removeStream_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.streamName = streamName;
        this.outputType = outputType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeStream_args args = new removeStream_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setStreamName(streamName);
        args.setOutputType(outputType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeStream();
      }
    }

    public void getClients(long deviceId, int channelId, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<getClients_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClients_call method_call = new getClients_call(deviceId, channelId, streamName, outputType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClients_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channelId;
      private String streamName;
      private String outputType;
      public getClients_call(long deviceId, int channelId, String streamName, String outputType, org.apache.thrift.async.AsyncMethodCallback<getClients_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.streamName = streamName;
        this.outputType = outputType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClients", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClients_args args = new getClients_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setStreamName(streamName);
        args.setOutputType(outputType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.stream.thrift.SmStreamClientInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClients();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getServerPoolInfo", new getServerPoolInfo());
      processMap.put("addStream", new addStream());
      processMap.put("addPlaylist", new addPlaylist());
      processMap.put("removeStream", new removeStream());
      processMap.put("getClients", new getClients());
      return processMap;
    }

    private static class getServerPoolInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerPoolInfo_args> {
      public getServerPoolInfo() {
        super("getServerPoolInfo");
      }

      protected getServerPoolInfo_args getEmptyArgsInstance() {
        return new getServerPoolInfo_args();
      }

      protected getServerPoolInfo_result getResult(I iface, getServerPoolInfo_args args) throws org.apache.thrift.TException {
        getServerPoolInfo_result result = new getServerPoolInfo_result();
        result.success = iface.getServerPoolInfo();
        return result;
      }
    }

    private static class addStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStream_args> {
      public addStream() {
        super("addStream");
      }

      protected addStream_args getEmptyArgsInstance() {
        return new addStream_args();
      }

      protected addStream_result getResult(I iface, addStream_args args) throws org.apache.thrift.TException {
        addStream_result result = new addStream_result();
        result.success = iface.addStream(args.deviceId, args.channelId, args.streamName, args.outputType, args.source, args.sourceType);
        return result;
      }
    }

    private static class addPlaylist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPlaylist_args> {
      public addPlaylist() {
        super("addPlaylist");
      }

      protected addPlaylist_args getEmptyArgsInstance() {
        return new addPlaylist_args();
      }

      protected addPlaylist_result getResult(I iface, addPlaylist_args args) throws org.apache.thrift.TException {
        addPlaylist_result result = new addPlaylist_result();
        result.success = iface.addPlaylist(args.deviceId, args.channelId, args.streamName, args.outputType, args.sourceList, args.timeMap);
        return result;
      }
    }

    private static class removeStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeStream_args> {
      public removeStream() {
        super("removeStream");
      }

      protected removeStream_args getEmptyArgsInstance() {
        return new removeStream_args();
      }

      protected removeStream_result getResult(I iface, removeStream_args args) throws org.apache.thrift.TException {
        removeStream_result result = new removeStream_result();
        result.success = iface.removeStream(args.deviceId, args.channel, args.streamName, args.outputType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getClients<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClients_args> {
      public getClients() {
        super("getClients");
      }

      protected getClients_args getEmptyArgsInstance() {
        return new getClients_args();
      }

      protected getClients_result getResult(I iface, getClients_args args) throws org.apache.thrift.TException {
        getClients_result result = new getClients_result();
        result.success = iface.getClients(args.deviceId, args.channelId, args.streamName, args.outputType);
        return result;
      }
    }

  }

  public static class getServerPoolInfo_args implements org.apache.thrift.TBase<getServerPoolInfo_args, getServerPoolInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerPoolInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerPoolInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerPoolInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerPoolInfo_args.class, metaDataMap);
    }

    public getServerPoolInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerPoolInfo_args(getServerPoolInfo_args other) {
    }

    public getServerPoolInfo_args deepCopy() {
      return new getServerPoolInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerPoolInfo_args)
        return this.equals((getServerPoolInfo_args)that);
      return false;
    }

    public boolean equals(getServerPoolInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerPoolInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerPoolInfo_args typedOther = (getServerPoolInfo_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerPoolInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerPoolInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getServerPoolInfo_argsStandardScheme getScheme() {
        return new getServerPoolInfo_argsStandardScheme();
      }
    }

    private static class getServerPoolInfo_argsStandardScheme extends StandardScheme<getServerPoolInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerPoolInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerPoolInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerPoolInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getServerPoolInfo_argsTupleScheme getScheme() {
        return new getServerPoolInfo_argsTupleScheme();
      }
    }

    private static class getServerPoolInfo_argsTupleScheme extends TupleScheme<getServerPoolInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerPoolInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerPoolInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerPoolInfo_result implements org.apache.thrift.TBase<getServerPoolInfo_result, getServerPoolInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerPoolInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerPoolInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerPoolInfo_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.stream.thrift.SmStreamServerInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.stream.thrift.SmStreamServerInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerPoolInfo_result.class, metaDataMap);
    }

    public getServerPoolInfo_result() {
    }

    public getServerPoolInfo_result(
      List<com.kaisquare.stream.thrift.SmStreamServerInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerPoolInfo_result(getServerPoolInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.stream.thrift.SmStreamServerInfo> __this__success = new ArrayList<com.kaisquare.stream.thrift.SmStreamServerInfo>();
        for (com.kaisquare.stream.thrift.SmStreamServerInfo other_element : other.success) {
          __this__success.add(new com.kaisquare.stream.thrift.SmStreamServerInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getServerPoolInfo_result deepCopy() {
      return new getServerPoolInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.stream.thrift.SmStreamServerInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.stream.thrift.SmStreamServerInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamServerInfo>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.stream.thrift.SmStreamServerInfo> getSuccess() {
      return this.success;
    }

    public getServerPoolInfo_result setSuccess(List<com.kaisquare.stream.thrift.SmStreamServerInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.stream.thrift.SmStreamServerInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerPoolInfo_result)
        return this.equals((getServerPoolInfo_result)that);
      return false;
    }

    public boolean equals(getServerPoolInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerPoolInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerPoolInfo_result typedOther = (getServerPoolInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerPoolInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerPoolInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getServerPoolInfo_resultStandardScheme getScheme() {
        return new getServerPoolInfo_resultStandardScheme();
      }
    }

    private static class getServerPoolInfo_resultStandardScheme extends StandardScheme<getServerPoolInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerPoolInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamServerInfo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.kaisquare.stream.thrift.SmStreamServerInfo _elem2; // required
                    _elem2 = new com.kaisquare.stream.thrift.SmStreamServerInfo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerPoolInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.stream.thrift.SmStreamServerInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerPoolInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getServerPoolInfo_resultTupleScheme getScheme() {
        return new getServerPoolInfo_resultTupleScheme();
      }
    }

    private static class getServerPoolInfo_resultTupleScheme extends TupleScheme<getServerPoolInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerPoolInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.stream.thrift.SmStreamServerInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerPoolInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamServerInfo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.kaisquare.stream.thrift.SmStreamServerInfo _elem7; // required
              _elem7 = new com.kaisquare.stream.thrift.SmStreamServerInfo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addStream_args implements org.apache.thrift.TBase<addStream_args, addStream_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStream_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStream_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channelId; // required
    public String streamName; // required
    public String outputType; // required
    public String source; // required
    public String sourceType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      STREAM_NAME((short)3, "streamName"),
      OUTPUT_TYPE((short)4, "outputType"),
      SOURCE((short)5, "source"),
      SOURCE_TYPE((short)6, "sourceType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // STREAM_NAME
            return STREAM_NAME;
          case 4: // OUTPUT_TYPE
            return OUTPUT_TYPE;
          case 5: // SOURCE
            return SOURCE;
          case 6: // SOURCE_TYPE
            return SOURCE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNELID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStream_args.class, metaDataMap);
    }

    public addStream_args() {
    }

    public addStream_args(
      long deviceId,
      int channelId,
      String streamName,
      String outputType,
      String source,
      String sourceType)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channelId = channelId;
      setChannelIdIsSet(true);
      this.streamName = streamName;
      this.outputType = outputType;
      this.source = source;
      this.sourceType = sourceType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStream_args(addStream_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channelId = other.channelId;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      if (other.isSetOutputType()) {
        this.outputType = other.outputType;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
      if (other.isSetSourceType()) {
        this.sourceType = other.sourceType;
      }
    }

    public addStream_args deepCopy() {
      return new addStream_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIdIsSet(false);
      this.channelId = 0;
      this.streamName = null;
      this.outputType = null;
      this.source = null;
      this.sourceType = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public addStream_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannelId() {
      return this.channelId;
    }

    public addStream_args setChannelId(int channelId) {
      this.channelId = channelId;
      setChannelIdIsSet(true);
      return this;
    }

    public void unsetChannelId() {
      __isset_bit_vector.clear(__CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return __isset_bit_vector.get(__CHANNELID_ISSET_ID);
    }

    public void setChannelIdIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELID_ISSET_ID, value);
    }

    public String getStreamName() {
      return this.streamName;
    }

    public addStream_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public String getOutputType() {
      return this.outputType;
    }

    public addStream_args setOutputType(String outputType) {
      this.outputType = outputType;
      return this;
    }

    public void unsetOutputType() {
      this.outputType = null;
    }

    /** Returns true if field outputType is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputType() {
      return this.outputType != null;
    }

    public void setOutputTypeIsSet(boolean value) {
      if (!value) {
        this.outputType = null;
      }
    }

    public String getSource() {
      return this.source;
    }

    public addStream_args setSource(String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public String getSourceType() {
      return this.sourceType;
    }

    public addStream_args setSourceType(String sourceType) {
      this.sourceType = sourceType;
      return this;
    }

    public void unsetSourceType() {
      this.sourceType = null;
    }

    /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceType() {
      return this.sourceType != null;
    }

    public void setSourceTypeIsSet(boolean value) {
      if (!value) {
        this.sourceType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((Integer)value);
        }
        break;

      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case OUTPUT_TYPE:
        if (value == null) {
          unsetOutputType();
        } else {
          setOutputType((String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((String)value);
        }
        break;

      case SOURCE_TYPE:
        if (value == null) {
          unsetSourceType();
        } else {
          setSourceType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelId());

      case STREAM_NAME:
        return getStreamName();

      case OUTPUT_TYPE:
        return getOutputType();

      case SOURCE:
        return getSource();

      case SOURCE_TYPE:
        return getSourceType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case STREAM_NAME:
        return isSetStreamName();
      case OUTPUT_TYPE:
        return isSetOutputType();
      case SOURCE:
        return isSetSource();
      case SOURCE_TYPE:
        return isSetSourceType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStream_args)
        return this.equals((addStream_args)that);
      return false;
    }

    public boolean equals(addStream_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channelId = true;
      boolean that_present_channelId = true;
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (this.channelId != that.channelId)
          return false;
      }

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_outputType = true && this.isSetOutputType();
      boolean that_present_outputType = true && that.isSetOutputType();
      if (this_present_outputType || that_present_outputType) {
        if (!(this_present_outputType && that_present_outputType))
          return false;
        if (!this.outputType.equals(that.outputType))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      boolean this_present_sourceType = true && this.isSetSourceType();
      boolean that_present_sourceType = true && that.isSetSourceType();
      if (this_present_sourceType || that_present_sourceType) {
        if (!(this_present_sourceType && that_present_sourceType))
          return false;
        if (!this.sourceType.equals(that.sourceType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addStream_args typedOther = (addStream_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputType()).compareTo(typedOther.isSetOutputType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputType, typedOther.outputType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(typedOther.isSetSourceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, typedOther.sourceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStream_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      sb.append(this.channelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputType:");
      if (this.outputType == null) {
        sb.append("null");
      } else {
        sb.append(this.outputType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceType:");
      if (this.sourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStream_argsStandardSchemeFactory implements SchemeFactory {
      public addStream_argsStandardScheme getScheme() {
        return new addStream_argsStandardScheme();
      }
    }

    private static class addStream_argsStandardScheme extends StandardScheme<addStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelId = iprot.readI32();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputType = iprot.readString();
                struct.setOutputTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SOURCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceType = iprot.readString();
                struct.setSourceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelId);
        oprot.writeFieldEnd();
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        if (struct.outputType != null) {
          oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
          oprot.writeString(struct.outputType);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        if (struct.sourceType != null) {
          oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.sourceType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStream_argsTupleSchemeFactory implements SchemeFactory {
      public addStream_argsTupleScheme getScheme() {
        return new addStream_argsTupleScheme();
      }
    }

    private static class addStream_argsTupleScheme extends TupleScheme<addStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetStreamName()) {
          optionals.set(2);
        }
        if (struct.isSetOutputType()) {
          optionals.set(3);
        }
        if (struct.isSetSource()) {
          optionals.set(4);
        }
        if (struct.isSetSourceType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeI32(struct.channelId);
        }
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetOutputType()) {
          oprot.writeString(struct.outputType);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
        if (struct.isSetSourceType()) {
          oprot.writeString(struct.sourceType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readI32();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputType = iprot.readString();
          struct.setOutputTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sourceType = iprot.readString();
          struct.setSourceTypeIsSet(true);
        }
      }
    }

  }

  public static class addStream_result implements org.apache.thrift.TBase<addStream_result, addStream_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStream_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStream_result.class, metaDataMap);
    }

    public addStream_result() {
    }

    public addStream_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStream_result(addStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addStream_result deepCopy() {
      return new addStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addStream_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStream_result)
        return this.equals((addStream_result)that);
      return false;
    }

    public boolean equals(addStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addStream_result typedOther = (addStream_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStream_resultStandardSchemeFactory implements SchemeFactory {
      public addStream_resultStandardScheme getScheme() {
        return new addStream_resultStandardScheme();
      }
    }

    private static class addStream_resultStandardScheme extends StandardScheme<addStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStream_resultTupleSchemeFactory implements SchemeFactory {
      public addStream_resultTupleScheme getScheme() {
        return new addStream_resultTupleScheme();
      }
    }

    private static class addStream_resultTupleScheme extends TupleScheme<addStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPlaylist_args implements org.apache.thrift.TBase<addPlaylist_args, addPlaylist_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlaylist_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceList", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeMap", org.apache.thrift.protocol.TType.LIST, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPlaylist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPlaylist_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channelId; // required
    public String streamName; // required
    public String outputType; // required
    public List<String> sourceList; // required
    public List<Long> timeMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      STREAM_NAME((short)3, "streamName"),
      OUTPUT_TYPE((short)4, "outputType"),
      SOURCE_LIST((short)5, "sourceList"),
      TIME_MAP((short)6, "timeMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // STREAM_NAME
            return STREAM_NAME;
          case 4: // OUTPUT_TYPE
            return OUTPUT_TYPE;
          case 5: // SOURCE_LIST
            return SOURCE_LIST;
          case 6: // TIME_MAP
            return TIME_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNELID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("sourceList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_MAP, new org.apache.thrift.meta_data.FieldMetaData("timeMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlaylist_args.class, metaDataMap);
    }

    public addPlaylist_args() {
    }

    public addPlaylist_args(
      long deviceId,
      int channelId,
      String streamName,
      String outputType,
      List<String> sourceList,
      List<Long> timeMap)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channelId = channelId;
      setChannelIdIsSet(true);
      this.streamName = streamName;
      this.outputType = outputType;
      this.sourceList = sourceList;
      this.timeMap = timeMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlaylist_args(addPlaylist_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channelId = other.channelId;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      if (other.isSetOutputType()) {
        this.outputType = other.outputType;
      }
      if (other.isSetSourceList()) {
        List<String> __this__sourceList = new ArrayList<String>();
        for (String other_element : other.sourceList) {
          __this__sourceList.add(other_element);
        }
        this.sourceList = __this__sourceList;
      }
      if (other.isSetTimeMap()) {
        List<Long> __this__timeMap = new ArrayList<Long>();
        for (Long other_element : other.timeMap) {
          __this__timeMap.add(other_element);
        }
        this.timeMap = __this__timeMap;
      }
    }

    public addPlaylist_args deepCopy() {
      return new addPlaylist_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIdIsSet(false);
      this.channelId = 0;
      this.streamName = null;
      this.outputType = null;
      this.sourceList = null;
      this.timeMap = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public addPlaylist_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannelId() {
      return this.channelId;
    }

    public addPlaylist_args setChannelId(int channelId) {
      this.channelId = channelId;
      setChannelIdIsSet(true);
      return this;
    }

    public void unsetChannelId() {
      __isset_bit_vector.clear(__CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return __isset_bit_vector.get(__CHANNELID_ISSET_ID);
    }

    public void setChannelIdIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELID_ISSET_ID, value);
    }

    public String getStreamName() {
      return this.streamName;
    }

    public addPlaylist_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public String getOutputType() {
      return this.outputType;
    }

    public addPlaylist_args setOutputType(String outputType) {
      this.outputType = outputType;
      return this;
    }

    public void unsetOutputType() {
      this.outputType = null;
    }

    /** Returns true if field outputType is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputType() {
      return this.outputType != null;
    }

    public void setOutputTypeIsSet(boolean value) {
      if (!value) {
        this.outputType = null;
      }
    }

    public int getSourceListSize() {
      return (this.sourceList == null) ? 0 : this.sourceList.size();
    }

    public java.util.Iterator<String> getSourceListIterator() {
      return (this.sourceList == null) ? null : this.sourceList.iterator();
    }

    public void addToSourceList(String elem) {
      if (this.sourceList == null) {
        this.sourceList = new ArrayList<String>();
      }
      this.sourceList.add(elem);
    }

    public List<String> getSourceList() {
      return this.sourceList;
    }

    public addPlaylist_args setSourceList(List<String> sourceList) {
      this.sourceList = sourceList;
      return this;
    }

    public void unsetSourceList() {
      this.sourceList = null;
    }

    /** Returns true if field sourceList is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceList() {
      return this.sourceList != null;
    }

    public void setSourceListIsSet(boolean value) {
      if (!value) {
        this.sourceList = null;
      }
    }

    public int getTimeMapSize() {
      return (this.timeMap == null) ? 0 : this.timeMap.size();
    }

    public java.util.Iterator<Long> getTimeMapIterator() {
      return (this.timeMap == null) ? null : this.timeMap.iterator();
    }

    public void addToTimeMap(long elem) {
      if (this.timeMap == null) {
        this.timeMap = new ArrayList<Long>();
      }
      this.timeMap.add(elem);
    }

    public List<Long> getTimeMap() {
      return this.timeMap;
    }

    public addPlaylist_args setTimeMap(List<Long> timeMap) {
      this.timeMap = timeMap;
      return this;
    }

    public void unsetTimeMap() {
      this.timeMap = null;
    }

    /** Returns true if field timeMap is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeMap() {
      return this.timeMap != null;
    }

    public void setTimeMapIsSet(boolean value) {
      if (!value) {
        this.timeMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((Integer)value);
        }
        break;

      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case OUTPUT_TYPE:
        if (value == null) {
          unsetOutputType();
        } else {
          setOutputType((String)value);
        }
        break;

      case SOURCE_LIST:
        if (value == null) {
          unsetSourceList();
        } else {
          setSourceList((List<String>)value);
        }
        break;

      case TIME_MAP:
        if (value == null) {
          unsetTimeMap();
        } else {
          setTimeMap((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelId());

      case STREAM_NAME:
        return getStreamName();

      case OUTPUT_TYPE:
        return getOutputType();

      case SOURCE_LIST:
        return getSourceList();

      case TIME_MAP:
        return getTimeMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case STREAM_NAME:
        return isSetStreamName();
      case OUTPUT_TYPE:
        return isSetOutputType();
      case SOURCE_LIST:
        return isSetSourceList();
      case TIME_MAP:
        return isSetTimeMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlaylist_args)
        return this.equals((addPlaylist_args)that);
      return false;
    }

    public boolean equals(addPlaylist_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channelId = true;
      boolean that_present_channelId = true;
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (this.channelId != that.channelId)
          return false;
      }

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_outputType = true && this.isSetOutputType();
      boolean that_present_outputType = true && that.isSetOutputType();
      if (this_present_outputType || that_present_outputType) {
        if (!(this_present_outputType && that_present_outputType))
          return false;
        if (!this.outputType.equals(that.outputType))
          return false;
      }

      boolean this_present_sourceList = true && this.isSetSourceList();
      boolean that_present_sourceList = true && that.isSetSourceList();
      if (this_present_sourceList || that_present_sourceList) {
        if (!(this_present_sourceList && that_present_sourceList))
          return false;
        if (!this.sourceList.equals(that.sourceList))
          return false;
      }

      boolean this_present_timeMap = true && this.isSetTimeMap();
      boolean that_present_timeMap = true && that.isSetTimeMap();
      if (this_present_timeMap || that_present_timeMap) {
        if (!(this_present_timeMap && that_present_timeMap))
          return false;
        if (!this.timeMap.equals(that.timeMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPlaylist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPlaylist_args typedOther = (addPlaylist_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputType()).compareTo(typedOther.isSetOutputType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputType, typedOther.outputType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceList()).compareTo(typedOther.isSetSourceList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceList, typedOther.sourceList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeMap()).compareTo(typedOther.isSetTimeMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeMap, typedOther.timeMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlaylist_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      sb.append(this.channelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputType:");
      if (this.outputType == null) {
        sb.append("null");
      } else {
        sb.append(this.outputType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceList:");
      if (this.sourceList == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeMap:");
      if (this.timeMap == null) {
        sb.append("null");
      } else {
        sb.append(this.timeMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlaylist_argsStandardSchemeFactory implements SchemeFactory {
      public addPlaylist_argsStandardScheme getScheme() {
        return new addPlaylist_argsStandardScheme();
      }
    }

    private static class addPlaylist_argsStandardScheme extends StandardScheme<addPlaylist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlaylist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelId = iprot.readI32();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputType = iprot.readString();
                struct.setOutputTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SOURCE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.sourceList = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.sourceList.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSourceListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.timeMap = new ArrayList<Long>(_list11.size);
                  for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                  {
                    long _elem13; // required
                    _elem13 = iprot.readI64();
                    struct.timeMap.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setTimeMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlaylist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelId);
        oprot.writeFieldEnd();
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        if (struct.outputType != null) {
          oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
          oprot.writeString(struct.outputType);
          oprot.writeFieldEnd();
        }
        if (struct.sourceList != null) {
          oprot.writeFieldBegin(SOURCE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sourceList.size()));
            for (String _iter14 : struct.sourceList)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeMap != null) {
          oprot.writeFieldBegin(TIME_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.timeMap.size()));
            for (long _iter15 : struct.timeMap)
            {
              oprot.writeI64(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlaylist_argsTupleSchemeFactory implements SchemeFactory {
      public addPlaylist_argsTupleScheme getScheme() {
        return new addPlaylist_argsTupleScheme();
      }
    }

    private static class addPlaylist_argsTupleScheme extends TupleScheme<addPlaylist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlaylist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetStreamName()) {
          optionals.set(2);
        }
        if (struct.isSetOutputType()) {
          optionals.set(3);
        }
        if (struct.isSetSourceList()) {
          optionals.set(4);
        }
        if (struct.isSetTimeMap()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeI32(struct.channelId);
        }
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetOutputType()) {
          oprot.writeString(struct.outputType);
        }
        if (struct.isSetSourceList()) {
          {
            oprot.writeI32(struct.sourceList.size());
            for (String _iter16 : struct.sourceList)
            {
              oprot.writeString(_iter16);
            }
          }
        }
        if (struct.isSetTimeMap()) {
          {
            oprot.writeI32(struct.timeMap.size());
            for (long _iter17 : struct.timeMap)
            {
              oprot.writeI64(_iter17);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlaylist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readI32();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputType = iprot.readString();
          struct.setOutputTypeIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sourceList = new ArrayList<String>(_list18.size);
            for (int _i19 = 0; _i19 < _list18.size; ++_i19)
            {
              String _elem20; // required
              _elem20 = iprot.readString();
              struct.sourceList.add(_elem20);
            }
          }
          struct.setSourceListIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.timeMap = new ArrayList<Long>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              long _elem23; // required
              _elem23 = iprot.readI64();
              struct.timeMap.add(_elem23);
            }
          }
          struct.setTimeMapIsSet(true);
        }
      }
    }

  }

  public static class addPlaylist_result implements org.apache.thrift.TBase<addPlaylist_result, addPlaylist_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlaylist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPlaylist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPlaylist_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlaylist_result.class, metaDataMap);
    }

    public addPlaylist_result() {
    }

    public addPlaylist_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlaylist_result(addPlaylist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addPlaylist_result deepCopy() {
      return new addPlaylist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addPlaylist_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlaylist_result)
        return this.equals((addPlaylist_result)that);
      return false;
    }

    public boolean equals(addPlaylist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPlaylist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPlaylist_result typedOther = (addPlaylist_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlaylist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlaylist_resultStandardSchemeFactory implements SchemeFactory {
      public addPlaylist_resultStandardScheme getScheme() {
        return new addPlaylist_resultStandardScheme();
      }
    }

    private static class addPlaylist_resultStandardScheme extends StandardScheme<addPlaylist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlaylist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlaylist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlaylist_resultTupleSchemeFactory implements SchemeFactory {
      public addPlaylist_resultTupleScheme getScheme() {
        return new addPlaylist_resultTupleScheme();
      }
    }

    private static class addPlaylist_resultTupleScheme extends TupleScheme<addPlaylist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlaylist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlaylist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeStream_args implements org.apache.thrift.TBase<removeStream_args, removeStream_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStream_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeStream_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String streamName; // required
    public String outputType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      STREAM_NAME((short)3, "streamName"),
      OUTPUT_TYPE((short)4, "outputType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // STREAM_NAME
            return STREAM_NAME;
          case 4: // OUTPUT_TYPE
            return OUTPUT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStream_args.class, metaDataMap);
    }

    public removeStream_args() {
    }

    public removeStream_args(
      long deviceId,
      int channel,
      String streamName,
      String outputType)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.streamName = streamName;
      this.outputType = outputType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStream_args(removeStream_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      if (other.isSetOutputType()) {
        this.outputType = other.outputType;
      }
    }

    public removeStream_args deepCopy() {
      return new removeStream_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.streamName = null;
      this.outputType = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public removeStream_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public removeStream_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getStreamName() {
      return this.streamName;
    }

    public removeStream_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public String getOutputType() {
      return this.outputType;
    }

    public removeStream_args setOutputType(String outputType) {
      this.outputType = outputType;
      return this;
    }

    public void unsetOutputType() {
      this.outputType = null;
    }

    /** Returns true if field outputType is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputType() {
      return this.outputType != null;
    }

    public void setOutputTypeIsSet(boolean value) {
      if (!value) {
        this.outputType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case OUTPUT_TYPE:
        if (value == null) {
          unsetOutputType();
        } else {
          setOutputType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case STREAM_NAME:
        return getStreamName();

      case OUTPUT_TYPE:
        return getOutputType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case STREAM_NAME:
        return isSetStreamName();
      case OUTPUT_TYPE:
        return isSetOutputType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStream_args)
        return this.equals((removeStream_args)that);
      return false;
    }

    public boolean equals(removeStream_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_outputType = true && this.isSetOutputType();
      boolean that_present_outputType = true && that.isSetOutputType();
      if (this_present_outputType || that_present_outputType) {
        if (!(this_present_outputType && that_present_outputType))
          return false;
        if (!this.outputType.equals(that.outputType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeStream_args typedOther = (removeStream_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputType()).compareTo(typedOther.isSetOutputType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputType, typedOther.outputType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStream_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputType:");
      if (this.outputType == null) {
        sb.append("null");
      } else {
        sb.append(this.outputType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStream_argsStandardSchemeFactory implements SchemeFactory {
      public removeStream_argsStandardScheme getScheme() {
        return new removeStream_argsStandardScheme();
      }
    }

    private static class removeStream_argsStandardScheme extends StandardScheme<removeStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputType = iprot.readString();
                struct.setOutputTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        if (struct.outputType != null) {
          oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
          oprot.writeString(struct.outputType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeStream_argsTupleSchemeFactory implements SchemeFactory {
      public removeStream_argsTupleScheme getScheme() {
        return new removeStream_argsTupleScheme();
      }
    }

    private static class removeStream_argsTupleScheme extends TupleScheme<removeStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetStreamName()) {
          optionals.set(2);
        }
        if (struct.isSetOutputType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetOutputType()) {
          oprot.writeString(struct.outputType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputType = iprot.readString();
          struct.setOutputTypeIsSet(true);
        }
      }
    }

  }

  public static class removeStream_result implements org.apache.thrift.TBase<removeStream_result, removeStream_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeStream_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStream_result.class, metaDataMap);
    }

    public removeStream_result() {
    }

    public removeStream_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStream_result(removeStream_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public removeStream_result deepCopy() {
      return new removeStream_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeStream_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStream_result)
        return this.equals((removeStream_result)that);
      return false;
    }

    public boolean equals(removeStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeStream_result typedOther = (removeStream_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStream_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStream_resultStandardSchemeFactory implements SchemeFactory {
      public removeStream_resultStandardScheme getScheme() {
        return new removeStream_resultStandardScheme();
      }
    }

    private static class removeStream_resultStandardScheme extends StandardScheme<removeStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeStream_resultTupleSchemeFactory implements SchemeFactory {
      public removeStream_resultTupleScheme getScheme() {
        return new removeStream_resultTupleScheme();
      }
    }

    private static class removeStream_resultTupleScheme extends TupleScheme<removeStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClients_args implements org.apache.thrift.TBase<getClients_args, getClients_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClients_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClients_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClients_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channelId; // required
    public String streamName; // required
    public String outputType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      STREAM_NAME((short)3, "streamName"),
      OUTPUT_TYPE((short)4, "outputType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // STREAM_NAME
            return STREAM_NAME;
          case 4: // OUTPUT_TYPE
            return OUTPUT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNELID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClients_args.class, metaDataMap);
    }

    public getClients_args() {
    }

    public getClients_args(
      long deviceId,
      int channelId,
      String streamName,
      String outputType)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channelId = channelId;
      setChannelIdIsSet(true);
      this.streamName = streamName;
      this.outputType = outputType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClients_args(getClients_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channelId = other.channelId;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      if (other.isSetOutputType()) {
        this.outputType = other.outputType;
      }
    }

    public getClients_args deepCopy() {
      return new getClients_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIdIsSet(false);
      this.channelId = 0;
      this.streamName = null;
      this.outputType = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getClients_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannelId() {
      return this.channelId;
    }

    public getClients_args setChannelId(int channelId) {
      this.channelId = channelId;
      setChannelIdIsSet(true);
      return this;
    }

    public void unsetChannelId() {
      __isset_bit_vector.clear(__CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return __isset_bit_vector.get(__CHANNELID_ISSET_ID);
    }

    public void setChannelIdIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELID_ISSET_ID, value);
    }

    public String getStreamName() {
      return this.streamName;
    }

    public getClients_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public String getOutputType() {
      return this.outputType;
    }

    public getClients_args setOutputType(String outputType) {
      this.outputType = outputType;
      return this;
    }

    public void unsetOutputType() {
      this.outputType = null;
    }

    /** Returns true if field outputType is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputType() {
      return this.outputType != null;
    }

    public void setOutputTypeIsSet(boolean value) {
      if (!value) {
        this.outputType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((Integer)value);
        }
        break;

      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case OUTPUT_TYPE:
        if (value == null) {
          unsetOutputType();
        } else {
          setOutputType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelId());

      case STREAM_NAME:
        return getStreamName();

      case OUTPUT_TYPE:
        return getOutputType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case STREAM_NAME:
        return isSetStreamName();
      case OUTPUT_TYPE:
        return isSetOutputType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClients_args)
        return this.equals((getClients_args)that);
      return false;
    }

    public boolean equals(getClients_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channelId = true;
      boolean that_present_channelId = true;
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (this.channelId != that.channelId)
          return false;
      }

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_outputType = true && this.isSetOutputType();
      boolean that_present_outputType = true && that.isSetOutputType();
      if (this_present_outputType || that_present_outputType) {
        if (!(this_present_outputType && that_present_outputType))
          return false;
        if (!this.outputType.equals(that.outputType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getClients_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getClients_args typedOther = (getClients_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputType()).compareTo(typedOther.isSetOutputType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputType, typedOther.outputType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClients_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      sb.append(this.channelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputType:");
      if (this.outputType == null) {
        sb.append("null");
      } else {
        sb.append(this.outputType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClients_argsStandardSchemeFactory implements SchemeFactory {
      public getClients_argsStandardScheme getScheme() {
        return new getClients_argsStandardScheme();
      }
    }

    private static class getClients_argsStandardScheme extends StandardScheme<getClients_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClients_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelId = iprot.readI32();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputType = iprot.readString();
                struct.setOutputTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClients_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelId);
        oprot.writeFieldEnd();
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        if (struct.outputType != null) {
          oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
          oprot.writeString(struct.outputType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClients_argsTupleSchemeFactory implements SchemeFactory {
      public getClients_argsTupleScheme getScheme() {
        return new getClients_argsTupleScheme();
      }
    }

    private static class getClients_argsTupleScheme extends TupleScheme<getClients_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetStreamName()) {
          optionals.set(2);
        }
        if (struct.isSetOutputType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeI32(struct.channelId);
        }
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetOutputType()) {
          oprot.writeString(struct.outputType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readI32();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputType = iprot.readString();
          struct.setOutputTypeIsSet(true);
        }
      }
    }

  }

  public static class getClients_result implements org.apache.thrift.TBase<getClients_result, getClients_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClients_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClients_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClients_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.stream.thrift.SmStreamClientInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.stream.thrift.SmStreamClientInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClients_result.class, metaDataMap);
    }

    public getClients_result() {
    }

    public getClients_result(
      List<com.kaisquare.stream.thrift.SmStreamClientInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClients_result(getClients_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.stream.thrift.SmStreamClientInfo> __this__success = new ArrayList<com.kaisquare.stream.thrift.SmStreamClientInfo>();
        for (com.kaisquare.stream.thrift.SmStreamClientInfo other_element : other.success) {
          __this__success.add(new com.kaisquare.stream.thrift.SmStreamClientInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getClients_result deepCopy() {
      return new getClients_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.stream.thrift.SmStreamClientInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.stream.thrift.SmStreamClientInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamClientInfo>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.stream.thrift.SmStreamClientInfo> getSuccess() {
      return this.success;
    }

    public getClients_result setSuccess(List<com.kaisquare.stream.thrift.SmStreamClientInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.stream.thrift.SmStreamClientInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClients_result)
        return this.equals((getClients_result)that);
      return false;
    }

    public boolean equals(getClients_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getClients_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getClients_result typedOther = (getClients_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClients_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClients_resultStandardSchemeFactory implements SchemeFactory {
      public getClients_resultStandardScheme getScheme() {
        return new getClients_resultStandardScheme();
      }
    }

    private static class getClients_resultStandardScheme extends StandardScheme<getClients_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClients_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamClientInfo>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.kaisquare.stream.thrift.SmStreamClientInfo _elem26; // required
                    _elem26 = new com.kaisquare.stream.thrift.SmStreamClientInfo();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClients_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.stream.thrift.SmStreamClientInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClients_resultTupleSchemeFactory implements SchemeFactory {
      public getClients_resultTupleScheme getScheme() {
        return new getClients_resultTupleScheme();
      }
    }

    private static class getClients_resultTupleScheme extends TupleScheme<getClients_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.stream.thrift.SmStreamClientInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.stream.thrift.SmStreamClientInfo>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.kaisquare.stream.thrift.SmStreamClientInfo _elem31; // required
              _elem31 = new com.kaisquare.stream.thrift.SmStreamClientInfo();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
