/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.stream.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamServerRegisterService {

  public interface Iface {

    /**
     * Register a streaming server to StreamManagementService.
     * (1) serverInfo - struct specifying server's details.
     * RETURN value is true for success and false otherwise.
     * 
     * @param serverInfo
     */
    public boolean registerStreamingServer(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo) throws org.apache.thrift.TException;

    /**
     * Deregister a streaming server from StreamManagementService.
     * (1) serverId - streaming server ID.
     * 
     * @param serverId
     */
    public void deregisterStreamingServer(long serverId) throws org.apache.thrift.TException;

    /**
     * Update current server status.
     * (1) status - structure contains server's status (cpu, memory, number of streams etc).
     * RETURN value is true for success and false otherwise.
     * 
     * @param status
     */
    public boolean updateStreamingServerStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerStreamingServer(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerStreamingServer_call> resultHandler) throws org.apache.thrift.TException;

    public void deregisterStreamingServer(long serverId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deregisterStreamingServer_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStreamingServerStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStreamingServerStatus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean registerStreamingServer(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo) throws org.apache.thrift.TException
    {
      send_registerStreamingServer(serverInfo);
      return recv_registerStreamingServer();
    }

    public void send_registerStreamingServer(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo) throws org.apache.thrift.TException
    {
      registerStreamingServer_args args = new registerStreamingServer_args();
      args.setServerInfo(serverInfo);
      sendBase("registerStreamingServer", args);
    }

    public boolean recv_registerStreamingServer() throws org.apache.thrift.TException
    {
      registerStreamingServer_result result = new registerStreamingServer_result();
      receiveBase(result, "registerStreamingServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerStreamingServer failed: unknown result");
    }

    public void deregisterStreamingServer(long serverId) throws org.apache.thrift.TException
    {
      send_deregisterStreamingServer(serverId);
      recv_deregisterStreamingServer();
    }

    public void send_deregisterStreamingServer(long serverId) throws org.apache.thrift.TException
    {
      deregisterStreamingServer_args args = new deregisterStreamingServer_args();
      args.setServerId(serverId);
      sendBase("deregisterStreamingServer", args);
    }

    public void recv_deregisterStreamingServer() throws org.apache.thrift.TException
    {
      deregisterStreamingServer_result result = new deregisterStreamingServer_result();
      receiveBase(result, "deregisterStreamingServer");
      return;
    }

    public boolean updateStreamingServerStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status) throws org.apache.thrift.TException
    {
      send_updateStreamingServerStatus(status);
      return recv_updateStreamingServerStatus();
    }

    public void send_updateStreamingServerStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status) throws org.apache.thrift.TException
    {
      updateStreamingServerStatus_args args = new updateStreamingServerStatus_args();
      args.setStatus(status);
      sendBase("updateStreamingServerStatus", args);
    }

    public boolean recv_updateStreamingServerStatus() throws org.apache.thrift.TException
    {
      updateStreamingServerStatus_result result = new updateStreamingServerStatus_result();
      receiveBase(result, "updateStreamingServerStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStreamingServerStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerStreamingServer(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo, org.apache.thrift.async.AsyncMethodCallback<registerStreamingServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerStreamingServer_call method_call = new registerStreamingServer_call(serverInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerStreamingServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo;
      public registerStreamingServer_call(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo, org.apache.thrift.async.AsyncMethodCallback<registerStreamingServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverInfo = serverInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerStreamingServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerStreamingServer_args args = new registerStreamingServer_args();
        args.setServerInfo(serverInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerStreamingServer();
      }
    }

    public void deregisterStreamingServer(long serverId, org.apache.thrift.async.AsyncMethodCallback<deregisterStreamingServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deregisterStreamingServer_call method_call = new deregisterStreamingServer_call(serverId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deregisterStreamingServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long serverId;
      public deregisterStreamingServer_call(long serverId, org.apache.thrift.async.AsyncMethodCallback<deregisterStreamingServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverId = serverId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deregisterStreamingServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deregisterStreamingServer_args args = new deregisterStreamingServer_args();
        args.setServerId(serverId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deregisterStreamingServer();
      }
    }

    public void updateStreamingServerStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStreamingServerStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStreamingServerStatus_call method_call = new updateStreamingServerStatus_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStreamingServerStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.kaisquare.stream.thrift.SmStreamServerStatus status;
      public updateStreamingServerStatus_call(com.kaisquare.stream.thrift.SmStreamServerStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStreamingServerStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStreamingServerStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStreamingServerStatus_args args = new updateStreamingServerStatus_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStreamingServerStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerStreamingServer", new registerStreamingServer());
      processMap.put("deregisterStreamingServer", new deregisterStreamingServer());
      processMap.put("updateStreamingServerStatus", new updateStreamingServerStatus());
      return processMap;
    }

    private static class registerStreamingServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerStreamingServer_args> {
      public registerStreamingServer() {
        super("registerStreamingServer");
      }

      protected registerStreamingServer_args getEmptyArgsInstance() {
        return new registerStreamingServer_args();
      }

      protected registerStreamingServer_result getResult(I iface, registerStreamingServer_args args) throws org.apache.thrift.TException {
        registerStreamingServer_result result = new registerStreamingServer_result();
        result.success = iface.registerStreamingServer(args.serverInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class deregisterStreamingServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deregisterStreamingServer_args> {
      public deregisterStreamingServer() {
        super("deregisterStreamingServer");
      }

      protected deregisterStreamingServer_args getEmptyArgsInstance() {
        return new deregisterStreamingServer_args();
      }

      protected deregisterStreamingServer_result getResult(I iface, deregisterStreamingServer_args args) throws org.apache.thrift.TException {
        deregisterStreamingServer_result result = new deregisterStreamingServer_result();
        iface.deregisterStreamingServer(args.serverId);
        return result;
      }
    }

    private static class updateStreamingServerStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStreamingServerStatus_args> {
      public updateStreamingServerStatus() {
        super("updateStreamingServerStatus");
      }

      protected updateStreamingServerStatus_args getEmptyArgsInstance() {
        return new updateStreamingServerStatus_args();
      }

      protected updateStreamingServerStatus_result getResult(I iface, updateStreamingServerStatus_args args) throws org.apache.thrift.TException {
        updateStreamingServerStatus_result result = new updateStreamingServerStatus_result();
        result.success = iface.updateStreamingServerStatus(args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class registerStreamingServer_args implements org.apache.thrift.TBase<registerStreamingServer_args, registerStreamingServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerStreamingServer_args");

    private static final org.apache.thrift.protocol.TField SERVER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("serverInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerStreamingServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerStreamingServer_argsTupleSchemeFactory());
    }

    public com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_INFO((short)1, "serverInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_INFO
            return SERVER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_INFO, new org.apache.thrift.meta_data.FieldMetaData("serverInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.stream.thrift.SmStreamServerInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerStreamingServer_args.class, metaDataMap);
    }

    public registerStreamingServer_args() {
    }

    public registerStreamingServer_args(
      com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo)
    {
      this();
      this.serverInfo = serverInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerStreamingServer_args(registerStreamingServer_args other) {
      if (other.isSetServerInfo()) {
        this.serverInfo = new com.kaisquare.stream.thrift.SmStreamServerInfo(other.serverInfo);
      }
    }

    public registerStreamingServer_args deepCopy() {
      return new registerStreamingServer_args(this);
    }

    @Override
    public void clear() {
      this.serverInfo = null;
    }

    public com.kaisquare.stream.thrift.SmStreamServerInfo getServerInfo() {
      return this.serverInfo;
    }

    public registerStreamingServer_args setServerInfo(com.kaisquare.stream.thrift.SmStreamServerInfo serverInfo) {
      this.serverInfo = serverInfo;
      return this;
    }

    public void unsetServerInfo() {
      this.serverInfo = null;
    }

    /** Returns true if field serverInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetServerInfo() {
      return this.serverInfo != null;
    }

    public void setServerInfoIsSet(boolean value) {
      if (!value) {
        this.serverInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_INFO:
        if (value == null) {
          unsetServerInfo();
        } else {
          setServerInfo((com.kaisquare.stream.thrift.SmStreamServerInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_INFO:
        return getServerInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_INFO:
        return isSetServerInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerStreamingServer_args)
        return this.equals((registerStreamingServer_args)that);
      return false;
    }

    public boolean equals(registerStreamingServer_args that) {
      if (that == null)
        return false;

      boolean this_present_serverInfo = true && this.isSetServerInfo();
      boolean that_present_serverInfo = true && that.isSetServerInfo();
      if (this_present_serverInfo || that_present_serverInfo) {
        if (!(this_present_serverInfo && that_present_serverInfo))
          return false;
        if (!this.serverInfo.equals(that.serverInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerStreamingServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerStreamingServer_args typedOther = (registerStreamingServer_args)other;

      lastComparison = Boolean.valueOf(isSetServerInfo()).compareTo(typedOther.isSetServerInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverInfo, typedOther.serverInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerStreamingServer_args(");
      boolean first = true;

      sb.append("serverInfo:");
      if (this.serverInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.serverInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerStreamingServer_argsStandardSchemeFactory implements SchemeFactory {
      public registerStreamingServer_argsStandardScheme getScheme() {
        return new registerStreamingServer_argsStandardScheme();
      }
    }

    private static class registerStreamingServer_argsStandardScheme extends StandardScheme<registerStreamingServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerStreamingServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverInfo = new com.kaisquare.stream.thrift.SmStreamServerInfo();
                struct.serverInfo.read(iprot);
                struct.setServerInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerStreamingServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverInfo != null) {
          oprot.writeFieldBegin(SERVER_INFO_FIELD_DESC);
          struct.serverInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerStreamingServer_argsTupleSchemeFactory implements SchemeFactory {
      public registerStreamingServer_argsTupleScheme getScheme() {
        return new registerStreamingServer_argsTupleScheme();
      }
    }

    private static class registerStreamingServer_argsTupleScheme extends TupleScheme<registerStreamingServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerStreamingServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerInfo()) {
          struct.serverInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerStreamingServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverInfo = new com.kaisquare.stream.thrift.SmStreamServerInfo();
          struct.serverInfo.read(iprot);
          struct.setServerInfoIsSet(true);
        }
      }
    }

  }

  public static class registerStreamingServer_result implements org.apache.thrift.TBase<registerStreamingServer_result, registerStreamingServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerStreamingServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerStreamingServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerStreamingServer_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerStreamingServer_result.class, metaDataMap);
    }

    public registerStreamingServer_result() {
    }

    public registerStreamingServer_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerStreamingServer_result(registerStreamingServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public registerStreamingServer_result deepCopy() {
      return new registerStreamingServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registerStreamingServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerStreamingServer_result)
        return this.equals((registerStreamingServer_result)that);
      return false;
    }

    public boolean equals(registerStreamingServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerStreamingServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerStreamingServer_result typedOther = (registerStreamingServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerStreamingServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerStreamingServer_resultStandardSchemeFactory implements SchemeFactory {
      public registerStreamingServer_resultStandardScheme getScheme() {
        return new registerStreamingServer_resultStandardScheme();
      }
    }

    private static class registerStreamingServer_resultStandardScheme extends StandardScheme<registerStreamingServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerStreamingServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerStreamingServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerStreamingServer_resultTupleSchemeFactory implements SchemeFactory {
      public registerStreamingServer_resultTupleScheme getScheme() {
        return new registerStreamingServer_resultTupleScheme();
      }
    }

    private static class registerStreamingServer_resultTupleScheme extends TupleScheme<registerStreamingServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerStreamingServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerStreamingServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deregisterStreamingServer_args implements org.apache.thrift.TBase<deregisterStreamingServer_args, deregisterStreamingServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregisterStreamingServer_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregisterStreamingServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregisterStreamingServer_argsTupleSchemeFactory());
    }

    public long serverId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregisterStreamingServer_args.class, metaDataMap);
    }

    public deregisterStreamingServer_args() {
    }

    public deregisterStreamingServer_args(
      long serverId)
    {
      this();
      this.serverId = serverId;
      setServerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregisterStreamingServer_args(deregisterStreamingServer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.serverId = other.serverId;
    }

    public deregisterStreamingServer_args deepCopy() {
      return new deregisterStreamingServer_args(this);
    }

    @Override
    public void clear() {
      setServerIdIsSet(false);
      this.serverId = 0;
    }

    public long getServerId() {
      return this.serverId;
    }

    public deregisterStreamingServer_args setServerId(long serverId) {
      this.serverId = serverId;
      setServerIdIsSet(true);
      return this;
    }

    public void unsetServerId() {
      __isset_bit_vector.clear(__SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
      return __isset_bit_vector.get(__SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
      __isset_bit_vector.set(__SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerId();
        } else {
          setServerId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Long.valueOf(getServerId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregisterStreamingServer_args)
        return this.equals((deregisterStreamingServer_args)that);
      return false;
    }

    public boolean equals(deregisterStreamingServer_args that) {
      if (that == null)
        return false;

      boolean this_present_serverId = true;
      boolean that_present_serverId = true;
      if (this_present_serverId || that_present_serverId) {
        if (!(this_present_serverId && that_present_serverId))
          return false;
        if (this.serverId != that.serverId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deregisterStreamingServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deregisterStreamingServer_args typedOther = (deregisterStreamingServer_args)other;

      lastComparison = Boolean.valueOf(isSetServerId()).compareTo(typedOther.isSetServerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, typedOther.serverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregisterStreamingServer_args(");
      boolean first = true;

      sb.append("serverId:");
      sb.append(this.serverId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregisterStreamingServer_argsStandardSchemeFactory implements SchemeFactory {
      public deregisterStreamingServer_argsStandardScheme getScheme() {
        return new deregisterStreamingServer_argsStandardScheme();
      }
    }

    private static class deregisterStreamingServer_argsStandardScheme extends StandardScheme<deregisterStreamingServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregisterStreamingServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.serverId = iprot.readI64();
                struct.setServerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregisterStreamingServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI64(struct.serverId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregisterStreamingServer_argsTupleSchemeFactory implements SchemeFactory {
      public deregisterStreamingServer_argsTupleScheme getScheme() {
        return new deregisterStreamingServer_argsTupleScheme();
      }
    }

    private static class deregisterStreamingServer_argsTupleScheme extends TupleScheme<deregisterStreamingServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregisterStreamingServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerId()) {
          oprot.writeI64(struct.serverId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregisterStreamingServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverId = iprot.readI64();
          struct.setServerIdIsSet(true);
        }
      }
    }

  }

  public static class deregisterStreamingServer_result implements org.apache.thrift.TBase<deregisterStreamingServer_result, deregisterStreamingServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregisterStreamingServer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregisterStreamingServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregisterStreamingServer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregisterStreamingServer_result.class, metaDataMap);
    }

    public deregisterStreamingServer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregisterStreamingServer_result(deregisterStreamingServer_result other) {
    }

    public deregisterStreamingServer_result deepCopy() {
      return new deregisterStreamingServer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregisterStreamingServer_result)
        return this.equals((deregisterStreamingServer_result)that);
      return false;
    }

    public boolean equals(deregisterStreamingServer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deregisterStreamingServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deregisterStreamingServer_result typedOther = (deregisterStreamingServer_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregisterStreamingServer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregisterStreamingServer_resultStandardSchemeFactory implements SchemeFactory {
      public deregisterStreamingServer_resultStandardScheme getScheme() {
        return new deregisterStreamingServer_resultStandardScheme();
      }
    }

    private static class deregisterStreamingServer_resultStandardScheme extends StandardScheme<deregisterStreamingServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregisterStreamingServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregisterStreamingServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregisterStreamingServer_resultTupleSchemeFactory implements SchemeFactory {
      public deregisterStreamingServer_resultTupleScheme getScheme() {
        return new deregisterStreamingServer_resultTupleScheme();
      }
    }

    private static class deregisterStreamingServer_resultTupleScheme extends TupleScheme<deregisterStreamingServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregisterStreamingServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregisterStreamingServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateStreamingServerStatus_args implements org.apache.thrift.TBase<updateStreamingServerStatus_args, updateStreamingServerStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStreamingServerStatus_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStreamingServerStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStreamingServerStatus_argsTupleSchemeFactory());
    }

    public com.kaisquare.stream.thrift.SmStreamServerStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.stream.thrift.SmStreamServerStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamingServerStatus_args.class, metaDataMap);
    }

    public updateStreamingServerStatus_args() {
    }

    public updateStreamingServerStatus_args(
      com.kaisquare.stream.thrift.SmStreamServerStatus status)
    {
      this();
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamingServerStatus_args(updateStreamingServerStatus_args other) {
      if (other.isSetStatus()) {
        this.status = new com.kaisquare.stream.thrift.SmStreamServerStatus(other.status);
      }
    }

    public updateStreamingServerStatus_args deepCopy() {
      return new updateStreamingServerStatus_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
    }

    public com.kaisquare.stream.thrift.SmStreamServerStatus getStatus() {
      return this.status;
    }

    public updateStreamingServerStatus_args setStatus(com.kaisquare.stream.thrift.SmStreamServerStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.kaisquare.stream.thrift.SmStreamServerStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamingServerStatus_args)
        return this.equals((updateStreamingServerStatus_args)that);
      return false;
    }

    public boolean equals(updateStreamingServerStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStreamingServerStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStreamingServerStatus_args typedOther = (updateStreamingServerStatus_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStreamingServerStatus_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamingServerStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateStreamingServerStatus_argsStandardScheme getScheme() {
        return new updateStreamingServerStatus_argsStandardScheme();
      }
    }

    private static class updateStreamingServerStatus_argsStandardScheme extends StandardScheme<updateStreamingServerStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStreamingServerStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.status = new com.kaisquare.stream.thrift.SmStreamServerStatus();
                struct.status.read(iprot);
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStreamingServerStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamingServerStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateStreamingServerStatus_argsTupleScheme getScheme() {
        return new updateStreamingServerStatus_argsTupleScheme();
      }
    }

    private static class updateStreamingServerStatus_argsTupleScheme extends TupleScheme<updateStreamingServerStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStreamingServerStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          struct.status.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStreamingServerStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = new com.kaisquare.stream.thrift.SmStreamServerStatus();
          struct.status.read(iprot);
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateStreamingServerStatus_result implements org.apache.thrift.TBase<updateStreamingServerStatus_result, updateStreamingServerStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStreamingServerStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStreamingServerStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStreamingServerStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamingServerStatus_result.class, metaDataMap);
    }

    public updateStreamingServerStatus_result() {
    }

    public updateStreamingServerStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamingServerStatus_result(updateStreamingServerStatus_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateStreamingServerStatus_result deepCopy() {
      return new updateStreamingServerStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateStreamingServerStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamingServerStatus_result)
        return this.equals((updateStreamingServerStatus_result)that);
      return false;
    }

    public boolean equals(updateStreamingServerStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStreamingServerStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStreamingServerStatus_result typedOther = (updateStreamingServerStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStreamingServerStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamingServerStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateStreamingServerStatus_resultStandardScheme getScheme() {
        return new updateStreamingServerStatus_resultStandardScheme();
      }
    }

    private static class updateStreamingServerStatus_resultStandardScheme extends StandardScheme<updateStreamingServerStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStreamingServerStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStreamingServerStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamingServerStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateStreamingServerStatus_resultTupleScheme getScheme() {
        return new updateStreamingServerStatus_resultTupleScheme();
      }
    }

    private static class updateStreamingServerStatus_resultTupleScheme extends TupleScheme<updateStreamingServerStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStreamingServerStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStreamingServerStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
